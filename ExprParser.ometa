let ExprParser = ometa(BaseStrParser) {
  //space        = ^space | fromToOrEnd('//', '\n'),

  // Numbers:
  number       = spaces <digit+ ('.' digit+)?>:f                          -> parseFloat(f),

  // Identifiers:
  nameFirst    = letter | '$' | '_',
  nameRest     = nameFirst | digit,
  name         = spaces <nameFirst nameRest*>,

  // Expressions:
  expr         = expr:x "||" andExpr:y                                    -> [#binop, "||", x, y]
               | andExpr,
  andExpr      = andExpr:x "&&" eqExpr:y                                  -> [#binop, "&&", x, y]
               | eqExpr,
  eqExpr       = eqExpr:x ( "=="  relExpr:y                               -> [#binop, "==",  x, y]
                          | "!="  relExpr:y                               -> [#binop, "!=",  x, y]
                          | "===" relExpr:y                               -> [#binop, "===", x, y]
                          | "!==" relExpr:y                               -> [#binop, "!==", x, y]
                          )
               | relExpr,
  relExpr      = relExpr:x ( ">"          addExpr:y                       -> [#binop, ">",   x, y]
                           | ">="         addExpr:y                       -> [#binop, ">=",  x, y]
                           | "<"          addExpr:y                       -> [#binop, "<",   x, y]
                           | "<="         addExpr:y                       -> [#binop, "<=",  x, y]
                           )
               | addExpr,
  addExpr     = addExpr:x "+" mulExpr:y                                   -> [#binop, "+",   x, y]
               | addExpr:x "-" mulExpr:y                                  -> [#binop, "-",   x, y]
               | mulExpr,
  mulExpr      = mulExpr:x "*" unary:y                                    -> [#binop, "*",   x, y]
               | mulExpr:x "/" unary:y                                    -> [#binop, "/",   x, y]
               | mulExpr:x "%" unary:y                                    -> [#binop, "%",   x, y]
               | unary,
  unary        = "-"      primExpr:p                                      -> [#unop,  "-",   p]
               | "+"      primExpr:p                                      -> [#unop,  "+",   p]
               | primExpr,
  primExpr     = primExpr:p "(" listOf(#expr, ','):as ")"                 -> [#call, p].concat(as)
               | primExprHd,
  primExprHd   = "(" expr:e ")"                                           -> e
               | name:n                                                   -> [#get, n]
               | number:n                                                 -> [#number, n]
               | "[" enum(#expr, ','):es "]"                              -> [#arr].concat(es),

  top          = expr:e spaces end                                        -> e
               | spaces end                                               -> null,
};
